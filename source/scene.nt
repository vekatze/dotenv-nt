import {
  core.environment {set-env},
  core.file {close, open},
  core.file.flag {for-r},
  core.file.mode {default-file-mode},
  core.rune,
  core.system {system, system-error},
  core.text {
    _drop,
    _get-rune,
    _take-N,
    drop-while,
    is-empty,
    take-while-N,
    text-byte-length,
  },
  core.text.io {read},
  core.text.parse {parse-text},
  path.entity.dirent {Dirent, dirent},
  path.entity.dtype {DT_REG, dtype},
  path.io {get-current-directory, read-directory},
  path.path {drop-last},
}

define _find-quote-index(t: &text): int {
  let len = text-byte-length(t);
  let f =
    define self(byte-index: int, escaping: bool): int {
      if ge-int(byte-index, len) {
        -1
      } else {
        let ch = _get-rune(t, byte-index);
        if and(eq-rune(ch, `"`), not(escaping)) {
          byte-index
        } else {
          let char-len = core.rune.size(ch);
          self(add-int(byte-index, char-len), and(eq-rune(ch, `\\`), not(escaping)))
        }
      }
    };
  f(0, False)
}

define _has-rune-at-head(t: &text, ch: rune): bool {
  let head-rune = _get-rune(t, 0);
  eq-rune(head-rune, ch)
}

define _skip-spaces(t: text): text {
  let t =
    drop-while(t, function (ch) {
      or(eq-rune(ch, ` `), eq-rune(ch, `\n`))
    });
  let found-sharp on t = _has-rune-at-head(t, `#`);
  if found-sharp {
    let t =
      drop-while(_drop(t, 1), function (ch) {
        ne-rune(ch, `\n`)
      });
    _skip-spaces(_drop(t, 1))
  } else {
    t
  }
}

define _has-quote-at-head(t: &text): bool {
  _has-rune-at-head(t, `"`)
}

define _take-while-rune(t: &text, ch: rune): text {
  take-while-N(t, function (r) {
    ne-rune(r, ch)
  })
}

inline _read-text-while-rune(haystack: text, needle: rune): pair(text, text) {
  let fragment on haystack = _take-while-rune(haystack, needle);
  let fragment-length on fragment = text-byte-length(fragment);
  let rest = _drop(haystack, add-int(fragment-length, 1));
  Pair(fragment, rest)
}

data error {
| Parse-Error(core.text.parse.error)
| System-Error(system-error)
}

define _read-quoted-value(value-rest: text): either(error, pair(text, text)) {
  let quoted-value-rest = _drop(value-rest, 1);
  let quote-index on quoted-value-rest = _find-quote-index(quoted-value-rest);
  let quoted-value on quoted-value-rest = _take-N(quoted-value-rest, quote-index);
  pin quoted-value = quoted-value;
  let quoted-value-length = text-byte-length(quoted-value);
  match parse-text(quoted-value) {
  | Right(value) =>
    let rest = _drop(quoted-value-rest, add-int(quoted-value-length, 1));
    Right(Pair(value, rest))
  | Left(e) =>
    Left(Parse-Error(e))
  }
}

inline _from-system<a>(v: system(a)): either(error, a) {
  match v {
  | Right(r) =>
    Right(r)
  | Left(e) =>
    Left(System-Error(e))
  }
}

define _read-env(env-text: text): either(error, unit) {
  let env-text = _skip-spaces(env-text);
  let should-finish on env-text = is-empty(env-text);
  if should-finish {
    Right(Unit)
  } else {
    let Pair(key, value-rest) = _read-text-while-rune(env-text, `=`);
    let quoted on value-rest = _has-quote-at-head(value-rest);
    if quoted {
      try Pair(value, rest) = _read-quoted-value(value-rest);
      pin value = value;
      pin key = key;
      let _ = set-env(key, value, True);
      _read-env(rest)
    } else {
      let Pair(value, rest) = _read-text-while-rune(value-rest, `\n`);
      pin value = value;
      pin key = key;
      match set-env(key, value, True) {
      | Right(_) =>
        _read-env(rest)
      | Left(e) =>
        Left(System-Error(e))
      }
    }
  }
}

define load-env-file(path: &text, initial-buffer-size: int): system(unit) {
  try file = open(path, for-r, default-file-mode);
  try content = read(file, initial-buffer-size);
  try _ = close(file);
  let _ = _read-env(content);
  Right(Unit)
}

define _from-system-to-option<a>(x: system(a)): ?a {
  match x {
  | Left(_) =>
    Left(Unit)
  | Right(v) =>
    Right(v)
  }
}

define _dtype-is-reg(d: &dtype): bool {
  case d {
  | DT_REG =>
    True
  | _ =>
    False
  }
}

define _dirent-is-reg(x: &dirent): bool {
  case x {
  | Dirent of {kind := DT_REG} =>
    True
  | _ =>
    False
  }
}

define _find-env-dirent(xs: &list(dirent), env-file-name: &text): ?&dirent {
  case xs {
  | Nil =>
    none
  | Cons(dirent, rest) =>
    tie Dirent of {kind, name} = dirent;
    let b1 = _dtype-is-reg(kind);
    let b2 = eq-text(name, env-file-name);
    if and(b1, b2) {
      Right(dirent)
    } else {
      _find-env-dirent(rest, env-file-name)
    }
  | Cons(_, rest) =>
    _find-env-dirent(rest, env-file-name)
  }
}

define _find-env-file(cursor-directory: &text, env-file-name: &text): ?text {
  try items = _from-system-to-option(read-directory(cursor-directory));
  pin items = items;
  match _find-env-dirent(items, env-file-name) {
  | Right(dirent) =>
    tie Dirent of {name} = dirent;
    let env-file-path = path.path.append(cursor-directory, name);
    Right(env-file-path)
  | Left(_) =>
    pin next-cursor = drop-last(cursor-directory);
    let should-finish = eq-text(next-cursor, cursor-directory);
    if should-finish {
      none
    } else {
      _find-env-file(next-cursor, env-file-name)
    }
  }
}

define find-env-file(env-file-name: &text): ?text {
  try cwd = _from-system-to-option(get-current-directory());
  pin cwd = cwd;
  _find-env-file(cwd, env-file-name)
}

define find-and-load-env-file(env-file-name: &text): ?unit {
  try env-file = find-env-file(env-file-name);
  pin env-file = env-file;
  _from-system-to-option(load-env-file(env-file, 1024))
}
